// Code generated by mockery v2.35.3. DO NOT EDIT.

package workit

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPool is an autogenerated mock type for the Pool type
type MockPool struct {
	mock.Mock
}

// Enqueue provides a mock function with given fields: _a0
func (_m *MockPool) Enqueue(_a0 Task) (Future, error) {
	ret := _m.Called(_a0)

	var r0 Future
	var r1 error
	if rf, ok := ret.Get(0).(func(Task) (Future, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(Task) Future); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Future)
		}
	}

	if rf, ok := ret.Get(1).(func(Task) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: _a0
func (_m *MockPool) Stop(_a0 context.Context) {
	_m.Called(_a0)
}

// Work provides a mock function with given fields: _a0
func (_m *MockPool) Work(_a0 context.Context) {
	_m.Called(_a0)
}

// NewMockPool creates a new instance of MockPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPool {
	mock := &MockPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
